@use './styles/breakpoints.scss';
@use './styles/utils.scss';
@use './styles/variables.scss';
@value columns from '../components/container.module.scss';

.root {
    //margin-top: 2rem;
    text-align: center;

    &.first-mod {
        margin-top: 0;
    }

    &.flex-mod {
        @include utils.flex-mod;
    }

    .wrapper {
        .link-wrap {
            position: absolute;
            height: 100%;
            width: 100%;
            z-index: 1;
        }

        .item {
            width: variables.$full-width;
            margin-left: 0;
            margin-right: 0;
            margin-bottom: 0;
            position: relative;

            .item-wrap {
                display: flex;
                justify-content: center;
                flex-direction: column;
                height: 100%;

                .caption {
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    overflow-y: auto;
                    overflow-x: hidden;

                    &.cap-bckg {
                        background: var(--caption-background);
                    }
                }

                .content {
                    display: flex;
                    justify-content: center;
                    flex-direction: column;
                    justify-content: space-between;
                    width: 100%;
                    @include utils.wrapper-size(0);
                    padding: 0 1.5rem;

                    .dsc-block {
                        a {
                            @include utils.move-before-wraplink;
                        }
                    }

                    .dsc {
                        font-size: variables.$xs-txt;
                        margin-top: 1.1428571429em;
                        margin-bottom: 1.1428571429em;
                        line-height: 1.4285714286em;

                        @include breakpoints.lg-min {
                            font-size: variables.$sm-txt;
                            margin-top: 0.9411764706em;
                            margin-bottom: 0.9411764706em;
                            line-height: 1.4117647059em;
                        }
                    }

                    &.thin .dsc {
                        margin: 0.3em 0;
                    }
                }
            }

            &.btn-only {
                .content {
                    justify-content: flex-end;
                }
            }

            &.left {
                .content {
                    text-align: left;
                }
            }

            &.right {
                .content {
                    text-align: right;
                }
            }
        }
    }

    .slick-arrow {
        padding: 0.75rem;
        background-color: #009374 !important;
        color: #ffffff;
        font-size: 0;
        text-align: center;
        margin: -1rem 0 0;
        position: absolute;
        top: 50%;
        border: none;
        opacity: 0;
        //outline: none;
        z-index: 2;
        width: auto;
        height: auto;
        transition: all 0.1s linear;

        &:before {
            font-size: 1.75rem;
            line-height: 1.25;

            font-weight: bold;
        }
    }

    .wrapper:hover .slick-arrow {
        opacity: 0.4;
    }

    .slick-arrow:hover {
        opacity: 1 !important;
    }

    .slick-prev {
        left: 2rem;
        //medium container
        @include breakpoints.md-min {
            left: 4.5rem !important;
        }

        &:before {
            content: '<';
        }
    }

    .slick-next {
        right: 2rem;
        @include breakpoints.md-min {
            right: 4.5rem !important;
        }

        &:before {
            content: '>';
        }
    }

    .item-wrap {
        .caption {
            position: absolute;
            width: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100%;

            &.cap-bckg {
                background: var(--caption-background);
            }
        }

        &.react-scroll {
            .caption {
                z-index: 2;
                position: relative;
            }

            .parallax-banner {
                & > div:first-of-type {
                    inset: -125px 0px !important;
                }
            }
        }

        .outer {
            overflow: hidden;
            width: 100%;
            position: absolute;
        }

        .image-block {
            position: relative;
            height: 100%;
            will-change: transform;

            &.image-block2 {
                position: absolute;
                will-change: transform;
                transform: translateY(-74.3272px);
                inset: -125px 0px !important;
                height: auto;
            }
        }

        img {
            will-change: transform;
        }
    }

    &.mob-resize {
        @media (max-width: 480px) {
            .item {
                min-height: 70vh;
            }
            .image-block,
            .item-wrap {
                height: 100%;
            }
        }
        @media (max-width: 1024px) {
            .item {
                min-height: 50vh;
            }
        }

        //this wends up being about the same height as 50vh?
        /*  @media print, screen and (min-width: 851px) and (max-width: 1024px) {
            .section_content .tsT_gallery.g1.widescreen_2-4_1 .tsI {
                height: 32.5rem;
            }
        } */
    }

    &.half-gallery {
        max-width: 50em;
        margin-left: auto;
        margin-right: auto;
    }

    @include utils.text-sizes;
}

.columns .root {
    @include utils.column-mod;
}
